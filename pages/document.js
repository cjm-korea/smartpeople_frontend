import Animation from "@/components/animation";
import Layout from "@/components/layout";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Box from '@mui/material/Box';
import { DataGrid } from '@mui/x-data-grid';
import { rows } from "@/components/data/rows";
import { columns } from "@/components/data/columns";
import * as qrcode from "qrcode";

export default function Document() {
    const router = useRouter();
    const [checkLogin, setCheckLogin] = useState(null)
    const [userData, setUserData] = useState(null)
    const [QR, setQR] = useState('');
    const isLoginURL = '/api/documentIsLogin'
    var token;

    function qrGenerate(companyName) {
        qrcode.toDataURL(`http://localhost:3000`).then(setQR);
    }

    useEffect(() => {
        if (typeof window !== 'undefined') {
            token = window.localStorage.getItem('jwt');
        } else {
            router.push({
                pathname: '/login'
            })
        }
        // console.log(token)

        if (token) {
            async function fetchIsLogin() {
                const headers = {
                    'Content-Type': 'application/json',
                    'Authorization': token,
                };
                const res = await fetch(isLoginURL, {
                    method: 'GET',
                    headers: headers
                }).then()
                setUserData(await res.json());

                console.log(userData.allow);
                console.log(userData);

                if (userData.allow !== true) {
                    localStorage.removeItem('jwt');
                    return router.push({
                        pathname: '/login'
                    })
                }
                // Make props to allow message
                setCheckLogin(res.status);
                // console.log(userData)
                qrGenerate(userData.user.companyName);
            }

            fetchIsLogin();
        }
    }, [])

    return (
        <Layout isLogIn={checkLogin}>
            <Head>
                <title>학원톡톡</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>

            <section className="text-gray-600 body-font">
                <div className="container mx-auto flex px-5 py-12 md:flex-row flex-col items-center">
                    <div className="lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center">
                        {userData.allow === true ?
                            <>
                                <h1 className="title-font sm:text-4xl text-3xl mb-4 font-medium text-gray-900">어서오세요 {userData.user.userName}님.</h1>
                                <p className="mb-1 leading-relaxed">상호명: {userData.user.companyName}</p>
                                <p className="mb-1 leading-relaxed">위치: {userData.user.companyAddress}</p>
                                <p className="mb-1 leading-relaxed">번호: {userData.user.companyNumber}</p>
                            </> :
                            <>
                                <h1 className="title-font sm:text-4xl text-3xl mb-4 font-medium text-gray-900">에러가 발생했습니다.</h1>
                            </>
                        }
                    </div>
                    <div className="flex justify-center lg:max-w-lg lg:w-full md:w-1/2 w-5/6">
                        <img src={QR} width={200} height={200} alt="QR code" />
                    </div>
                </div>
            </section>

            <section className="text-gray-600 body-font">
                <div className="container mx-auto flex px-5 py-12 md:flex-row flex-col items-center w-full">
                    {userData.allow === true ?
                        <>
                            <Box sx={{ height: 400, width: '100%' }}>
                                <DataGrid
                                    getRowId={(row) => row.userName}
                                    rows={userData.user.students}
                                    columns={columns}
                                />
                            </Box>
                        </> :
                        <>

                        </>
                    }

                </div>
            </section>
        </Layout>
    )

}

//   // This gets called on every request
// export async function getServerSideProps() {
//     const getUser = 'http://localhost:8000/auth/getUser'
//     var token = undefined;
//     var data = null;
//     if (typeof window !== 'undefined') {
//         token = window.localStorage.getItem('jwt');
//         const headers = {
//             'Content-Type': 'application/json',
//             Authorization: `Bearer ${token}`,
//         };
//         const res = await fetch(getUser,{
//             method: 'GET',
//             headers: headers
//         })
//         data = await res.json()
//         console.log(data);
//     }
//     console.log(token)
//     // appendData('test', 'test', 'test');
//     // Pass data to the page via props
//     return { props: { data } }
//   }