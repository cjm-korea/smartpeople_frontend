import Animation from "@/components/animation";
import Layout from "@/components/layout";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Box from '@mui/material/Box';
import { DataGrid } from '@mui/x-data-grid';
import {appendData, rows} from "@/components/data/rows";
import { columns } from "@/components/data/columns";

export default function Document() {
    const router = useRouter();
    const [checkLogin, setCheckLogin] = useState(null)
    const isLoginURL = '/api/isLogin'
    var token;

    useEffect(() => {
        if (typeof window !== 'undefined') {
            token = window.localStorage.getItem('jwt');
        } else {
            router.push({
                pathname: '/login'
            })
        }

        if (token) {
            async function fetchIsLogin() {
                const headers = {
                    'Content-Type': 'application/json',
                    'Authorization': token,
                };
                const res = await fetch(isLoginURL, {
                    method: 'GET',
                    headers: headers
                })
                setCheckLogin(res.status);
                if (res.status !== 200) {
                    localStorage.removeItem('jwt');
                    router.push({
                        pathname: '/login'
                    })
                }
            }
            fetchIsLogin();
        }
    }, [])

    return (
        <Layout isLogIn={checkLogin}>
            <Head>
                <title>학원톡톡</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>

            <section className="text-gray-600 body-font">
                <div className="container mx-auto flex px-5 py-12 md:flex-row flex-col items-center">
                    <div className="lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center">
                        <h1 className="title-font sm:text-4xl text-3xl mb-4 font-medium text-gray-900">효율적인 학원 운영의 길
                            {/* <br class="hidden lg:inline-block">readymade gluten/</br> */}
                        </h1>
                        <p className="mb-8 leading-relaxed">아이의 학원 스케쥴이나 수업에 잘 참석하고 있는지에 대한 여부를 궁금해하는 학부모가 많으나 학원의 관리 인력 및 시스템 부족으로 아이들의 정보를 실시간으로 알려주지 못합니다.
                            학원에는 근무자 간 체계적인 업무 관리 채널이 없습니다. 근무자 간 체계적인 업무 관리 채널이 없기 때문에 불편사항에 대한 빠른 피드백과 업무 효용이 잘 일어나고 있지 않습니다.</p>
                        <div className="flex justify-center">
                            <button className="inline-flex text-white bg-indigo-500 border-0 py-2 px-6 focus:outline-none hover:bg-indigo-600 rounded text-lg">연락하기</button>
                        </div>
                    </div>
                    <div className="lg:max-w-lg lg:w-full md:w-1/2 w-5/6">
                        <Animation />
                    </div>
                </div>
            </section>

            <section className="text-gray-600 body-font">
                <div className="container mx-auto flex px-5 py-12 md:flex-row flex-col items-center w-full">
                    <Box sx={{ height: 400, width: '100%' }}>
                        <DataGrid
                            // rows={Rows}
                            getRowId={(row) => row.userName}
                            rows={rows}
                            columns={columns}
                        />
                    </Box>
                </div>
            </section>
        </Layout>
    )
    
}

  // This gets called on every request
export async function getServerSideProps() {
    const getUser = 'http://localhost:8000/auth/getUser'
    var token = undefined;
    var data = null;
    if (typeof window !== 'undefined') {
        token = window.localStorage.getItem('jwt');
        const headers = {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
        };
        const res = await fetch(getUser,{
            method: 'GET',
            headers: headers
        })
        data = await res.json()
        console.log(data);
    }
    console.log(token)
    // appendData('test', 'test', 'test');
    // Pass data to the page via props
    return { props: { data } }
  }